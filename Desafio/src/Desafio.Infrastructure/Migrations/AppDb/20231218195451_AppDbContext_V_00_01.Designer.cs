// <auto-generated />
using System;
using Desafio.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Desafio.Infrastructure.Migrations.AppDb
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231218195451_AppDbContext_V_00_01")]
    partial class AppDbContext_V_00_01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Desafio.Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AlternativeCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alternative_code");

                    b.Property<bool>("CanSell")
                        .HasColumnType("boolean")
                        .HasColumnName("can_sell");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean")
                        .HasColumnName("enable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.HasKey("Id");

                    b.ToTable("person", "public");
                });

            modelBuilder.Entity("Desafio.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("acronym");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bar_code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean")
                        .HasColumnName("enable");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 4)
                        .HasColumnType("numeric(15,4)")
                        .HasColumnName("price");

                    b.Property<bool>("Salable")
                        .HasColumnType("boolean")
                        .HasColumnName("salable");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_description");

                    b.Property<decimal>("StoredQuantity")
                        .HasPrecision(15, 4)
                        .HasColumnType("numeric(15,4)")
                        .HasColumnName("stored_quantity");

                    b.HasKey("Id");

                    b.HasIndex("Acronym");

                    b.ToTable("product", "public");
                });

            modelBuilder.Entity("Desafio.Domain.Unit", b =>
                {
                    b.Property<string>("Acronym")
                        .HasColumnType("text")
                        .HasColumnName("acronym");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Acronym");

                    b.ToTable("unit", "public");
                });

            modelBuilder.Entity("Desafio.Domain.Product", b =>
                {
                    b.HasOne("Desafio.Domain.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("Acronym")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Desafio.Domain.Unit", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
